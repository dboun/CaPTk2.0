#ifndef CaPTkRecurrence_h
#define CaPTkRecurrence_h

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCaPTkRecurrenceExports.h>

#include <QObject>
#include <QFuture>
#include <QFutureWatcher>

namespace captk {
/** \class CaPTkRecurrence
 *  \brief Recurrence Prediction (Infiltration Index) Module API
 */
class MITKCAPTKRECURRENCE_EXPORT CaPTkRecurrence : public QObject
{
    Q_OBJECT

public:
    CaPTkRecurrence(QObject *parent = 0);

    ~CaPTkRecurrence() {}

    /** \brief Trains a new model
     * 
     * Execute the algorithm in a background thread. When the
     * algorithm finishes, OnAlgorithmFinished() is called.
     * 
    */
    void Train(QString subjectDirPath, QString outputModelDirPath);

    /** \brief Uses an existent model for making predictions
     * 
     * Execute the algorithm in a background thread. When the
     * algorithm finishes, OnAlgorithmFinished() is called.
     * 
    */
    void Inference(QString subjectDirPath, QString modelDirPath, QString outputDirPath);

    /** \struct Result
     *  \brief result of the execution of the algorithm
     * 
     * if ok == true, then everything went fine, 
     * else errorMessage is populated.
    */
    typedef struct Result 
    {
        bool ok = true;
        std::string errorMessage = "";
    } Result;

public slots:
    /** \brief This function runs in the main thread when 
     * the algorithm is finished
    */
    void OnAlgorithmFinished();

signals:
    /** \brief This signal is emitted when the module is done
     *  with all its operations, including any post-processing
     *  done in OnAlgorithmFinished().
     */
    void done();

protected:

    /** \brief Runs the algorithm after the operations in Train()
     * 
     * This can serve as a background thread. When the
     * algorithm finishes, OnAlgorithmFinished() is called.
     * The parameters are the same as Run()
     * 
     * @return the result struct (that contains the output or an errorMessage)
    */
    Result RunTrainThread(QString subjectDirPath, QString outputModelDirPath);

    /** \brief Runs the algorithm after the operations in Inference()
     * 
     * This can serve as a background thread. When the
     * algorithm finishes, OnAlgorithmFinished() is called.
     * The parameters are the same as Run()
     * 
     * @return the result struct (that contains the output or an errorMessage)
    */
    Result RunInferenceThread(QString subjectDirPath, QString modelDirPath, QString outputDirPath);

    bool m_IsRunning = false;
    QFutureWatcher<Result> m_Watcher;
    QFuture<Result> m_FutureResult;

};
}

#endif // ! CaPTkRecurrence_h
